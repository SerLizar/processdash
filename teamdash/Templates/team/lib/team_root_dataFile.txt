// <!--#echo var="-*- mode:html -*-" -->
// Data file for a team project for <!--#echo Full_Name -->
//

#include <<!--#echo Process_ID -->/rollup_dataFile.txt> exclude (
    [Analyze Rollup Data/leaf], [Analyze Rollup Data/node]
)
#include <<!--#echo Process_ID -->/root_data.txt>
undefine([Simple Project Tag]);
[<!--#echo Process_ID --> Team Root Tag] = tag;
[EV Project Tag] = tag;

[EXPORT_FILE] = 
    iff([Team_Data_Directory] == "", "",
        [Team_Data_Directory] & [file_sep] & "disseminate" &
        [file_sep] & "team-data.pdash");
[EXPORT_FILE/Instructions] = 
    "file:/<!--#echo Process_ID -->/disseminationExportFilter.xml";

[Related_EV_Schedule/Team] = "MERGED:" & [Project_Schedule_Name];
[Related_EV_Schedule/Master] =
    iff(! [Master_Project_Path], "",
       "MERGED:" & indirect([Master_Project_Path] &/ "Project_Schedule_Name"));


/*
 * Data elements for label-based filtering
 */

[Task_Labels] = [Synchronized_Task_Labels];
[Filtered_Task_Labels] = globSearch([Label//Filter], [Task_Labels]);


/*
 * Redefine the rollup filter to include items from this project, and
 * respect the label-based filter if it is in effect.
 */
[Rollup_Filter] =
    "(!defined([{Filtered_Task_Labels}]) \
        || intersects([{Filtered_Task_Labels}], [EV_Task_IDs])) \
     && ([Project_WBS_ID] == [{Project_WBS_ID}] \
        || startsWith([{Project_WBS_ID}] & \"/\", [Project_WBS_ID]))";


/*
 * Create a list of nodes whose Project_WBS_ID matches the ID of this node.
 */
[Corresponding_Project_Nodes] =
    filter([Project_WBS_ID] == indirect([_] &/ "Project_WBS_ID"),
           [/<!--#echo Process_ID -->/Project List]);


/*
 * Publish team settings data that can be exported to individuals
 */
[Team_Settings] = TAG;

[Team_Settings /Defect_Type_Standard] =
    iff([Defect Type Standard] && ([Defect Type Standard] != " "),
        [Defect Type Standard] & ", imported from team project:::" &
        indirect("/Defect Type Standard/" & [Defect Type Standard]),
        null);
