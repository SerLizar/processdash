<!--
// PSP Dashboard - Data Automation Tool for PSP-like processes
// Copyright (C) 2003 Software Process Dashboard Initiative
// 
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// 
// The author(s) may be contacted at:
// OO-ALC/TISHD
// Attn: PSP Dashboard Group
// 6137 Wardleigh Road
// Hill AFB, UT 84056-5843
// 
// E-Mail POC:  processdash-devel@lists.sourceforge.net

This web page helps to test the data integration mechanism.

 Test input elements:
  - checkboxes (date, normal)
  - text field (date, number, text)
  - text area (text)
  - select (no values, string values, numeric values, set to blank)

 For each, check that it will 
  - respond to user input
  - respond to data repository
  - handle read-only state

 TODO

 Check that "hidden, active" fields 
  - get updates from the repository
  - refresh the form when data changes

 Check that multiple frames AND multiple windows don't cause problems.

-->

<html>
<head>
<link rel=stylesheet type="text/css" href="/style.css">
<title>Test Data Integration</title>


</head>
<body>

<h1>Test Data Integration</h1>

<form name=plan>

<input type=button name="Run" value="Run Test" onClick="runTest()">

<table>

<tr>
<td></td>
<td><b>Responds to user</b></td>
<td><b>Responds to repository</b></td>
<td><b>Read only</b></td>
</tr>

<tr><td colspan=4><h2>Dates</h2></td></tr>

<tr>
<td>Checkboxes</td>
<td>1 <input type=checkbox name="[test//date]d"></td>
<td>2 <input type=checkbox name="[test//date]d"></td>
<td>3 <input type=checkbox name="[test//date]dr"></td>
</tr>

<tr>
<td>Text fields</td>
<td>4 <input type=text size=7 name="[test//date]d"></td>
<td>5 <input type=text size=7 name="[test//date]d"></td>
<td>6 <input type=text size=7 name="[test//date]dr"></td>
</tr>

<tr><td colspan=4><h2>Numbers</h2></td></tr>

<tr>
<td>Text fields</td>
<td>7 <input type=text size=7 name="[test//number]"></td>
<td>8 <input type=text size=7 name="[test//number]"></td>
<td>9 <input type=text size=7 name="[test//number]r"></td>
</tr>

<tr>
<td>Percentage Text fields</td>
<td>10 <input type=text size=7 name="[test//number]%"></td>
<td>11 <input type=text size=7 name="[test//number]%"></td>
<td>12 <input type=text size=7 name="[test//number]%r"></td>
</tr>

<tr>
<td>Select</td>
<td>13 <select name="[test//number]o">
<option value="">
<option value="1.1">One
<option value="2.2">Two
<option value="3.3">Three
</select></td>
<td>14 <select name="[test//number]o">
<option value="">
<option value="1.1">One
<option value="2.2">Two
<option value="3.3">Three
</select></td>
<td>15 <select name="[test//number]or">
<option value="">
<option value="1.1">One
<option value="2.2">Two
<option value="3.3">Three
</select></td>
</tr>

<tr>
<td>Checkboxes</td>
<td>16 <input type=checkbox name="[test//number]"></td>
<td>17 <input type=checkbox name="[test//number]"></td>
<td>18 <input type=checkbox name="[test//number]r"></td>
</tr>

<tr><td colspan=4><h2>Strings</h2></td></tr>

<tr>
<td>Text fields</td>
<td>19 <input type=text size=7 name="[test//string]s"></td>
<td>20 <input type=text size=7 name="[test//string]s"></td>
<td>21 <input type=text size=7 name="[test//string]sr"></td>
</tr>

<tr>
<td>Text area</td>
<td>22 <textarea rows=4 cols=10 name="[test//string]s"></textarea></td>
<td>23 <textarea rows=4 cols=10 name="[test//string]s"></textarea></td>
<td>24 <textarea rows=4 cols=10 name="[test//string]sr"></textarea></td>
</tr>

<tr>
<td>Select (no value)</td>
<td>25 <select name="[test//string]s">
<option>
<option>Foo
<option>Bar
<option>Baz
</select></td>
<td>26 <select name="[test//string]s">
<option>
<option>Foo
<option>Bar
<option>Baz
</select></td>
<td>27 <select name="[test//string]sr">
<option>
<option>Foo
<option>Bar
<option>Baz
</select></td>
</tr>

<tr>
<td>Select (string values)</td>
<td>28 <select name="[test//string]s">
<option value="">
<option value="-foo-">Foo
<option value="-bar-">Bar
<option value="-baz-">Baz
</select></td>
<td>29 <select name="[test//string]s">
<option value="">
<option value="-foo-">Foo
<option value="-bar-">Bar
<option value="-baz-">Baz
</select></td>
<td>30 <select name="[test//string]sr">
<option value="">
<option value="-foo-">Foo
<option value="-bar-">Bar
<option value="-baz-">Baz
</select></td>
</tr>

</table>

</form>


<script language=JavaScript src="/data.js">
document.writeln("<P>Problem loading the data.js script!");
</script>

<script language=JavaScript>

    var baseDelay = 200, dataDelay = 1200;
    var elements = document.forms[0].elements;
    var testSteps;
    var currentStep;
    var failed;
    var delay;
    var dateValue;
    var weirdString = "~!@#$%^&*()_<>\"\"`-=_+{}|[]\\;\':,./<>?";


    var dateCheckUser = 1, dateCheckRep = 2, dateCheckRO = 3;
    var dateTextUser  = 4, dateTextRep  = 5, dateTextRO  = 6;

    var numUser = 7,  numRep = 8,  numRO = 9;
    var pctUser = 10, pctRep = 11, pctRO = 12;
    var numSelUser   = 13, numSelRep   = 14, numSelRO   = 15;
    var numCheckUser = 16, numCheckRep = 17, numCheckRO = 18;

    var strTextUser = 19, strTextRep = 20, strTextRO = 21;
    var strAreaUser = 22, strAreaRep = 23, strAreaRO = 24;
    var strSelUser  = 25, strSelRep  = 26, strSelRO  = 27;
    var strSelVUser = 28, strSelVRep = 29, strSelVRO = 30;

    function assert(expect, actual, failureMessage) {
        if (expect != actual) {
	    failed = true;
	    window.alert(currentStep + ": " + failureMessage);
        }
    }

    function runTest() {
        failed = false;
	loadSteps();
	runTestStep(0);
    }

    function loadSteps() {
        var script = parent.frames["script"].document.forms[0].elements[0];
        testSteps = script.value.split("\n");
    }

    function runTestStep(num) {
        if (num < testSteps.length) {
	    currentStep = testSteps[num];
	    window.status = currentStep;
	    delay = 1;
            eval(currentStep);
	    if (!failed) {
	        num++;
	        window.setTimeout("runTestStep("+num+")", delay);
            }
        } else {
	    window.alert("Success!");
        }
    }

    function setChecked(num, checked) {
        elements[num].checked = checked;
	NSchangeNotifyElem(elements[num]);
	delay = dataDelay;
    }

    function setValue(num, value) {
        elements[num].value = value;
	NSchangeNotifyElem(elements[num]);
	delay = dataDelay;
    }

    function setSelIndex(num, value) {
        elements[num].selectedIndex = value;
	NSchangeNotifyElem(elements[num]);
	delay = dataDelay;
    }

    function checkDateFields(hasValue) {
        var checked = (hasValue ? " checked" : " unchecked");
        assert(hasValue, elements[dateCheckUser].checked,
	       dateCheckUser+" should be"+checked);
        assert(hasValue, elements[dateCheckRep].checked,
	       dateCheckRep+" should be"+checked);
        assert(hasValue, elements[dateCheckRO].checked, 
	       dateCheckRO+" should be"+checked);

        var be_empty = (hasValue ? " have data" : " be empty");
        assert(hasValue, elements[dateTextUser].value != "",
	       dateTextUser+" should"+be_empty);
        assert(hasValue, elements[dateTextRep].value != "",
	       dateTextRep+" should"+be_empty);
        assert(hasValue, elements[dateTextRO].value != "", 
               dateTextRO+" should"+be_empty);
    }

    function getSelIdx(num) {
        if (elements[num].selectedIndex > 0)
	    return elements[num].selectedIndex;
	else
	    return 0;
    }
    function checkNumberFields(num, pct, selIndex, checked) {
        assert(num, elements[numUser].value, numUser+" should be "+num);
        assert(num, elements[numRep].value, numRep+" should be "+num);
        assert(num, elements[numRO].value, numRO+" should be "+num);

        assert(pct, elements[pctUser].value, pctUser+" should be "+pct);
        assert(pct, elements[pctRep].value, pctRep+" should be "+pct);
        assert(pct, elements[pctRO].value, pctRO+" should be "+pct);

	if (selIndex >= 0) {
            assert(selIndex, getSelIdx(numSelUser),
	           numSelUser+" should select item "+selIndex);
            assert(selIndex, getSelIdx(numSelRep),
	           numSelRep+" should select item "+selIndex);
            assert(selIndex, getSelIdx(numSelRO),
	           numSelRO+" should select item "+selIndex);
        }

	var _checked = (checked ? " checked" : " unchecked");
        assert(checked, elements[numCheckUser].checked,
               numCheckUser+" should be"+_checked);
        assert(checked, elements[numCheckRep].checked,
               numCheckRep+" should be"+_checked);
        assert(checked, elements[numCheckRO].checked,
               numCheckRO+" should be"+_checked);
    }
    function checkNumberFieldsEmpty() {
        checkNumberFields("?????", "?????", 0, false);
    }

    function checkStringFields(text, selIndex, selVIndex) {
        assert(text, elements[strTextUser].value,
               strTextUser+" should be "+text);
        assert(text, elements[strTextRep].value,
               strTextRep+" should be "+text);
        assert(text, elements[strTextRO].value,
               strTextRO+" should be "+text);

        assert(text, elements[strTextUser].value,
               strTextUser+" should be "+text);
        assert(text, elements[strTextRep].value,
               strTextRep+" should be "+text);
        assert(text, elements[strTextRO].value,
               strTextRO+" should be "+text);

	if (selIndex >= 0) {
            assert(selIndex, getSelIdx(strSelUser),
	           strSelUser+" should select item "+selIndex);
            assert(selIndex, getSelIdx(strSelRep),
	           strSelRep+" should select item "+selIndex);
            assert(selIndex, getSelIdx(strSelRO),
	           strSelRO+" should select item "+selIndex);
        }

	if (selVIndex >= 0) {
            assert(selVIndex, getSelIdx(strSelVUser),
	           strSelVUser+" should select item "+selVIndex);
            assert(selVIndex, getSelIdx(strSelVRep),
	           strSelVRep+" should select item "+selVIndex);
            assert(selVIndex, getSelIdx(strSelVRO),
	           strSelVRO+" should select item "+selVIndex);
        }
    }
    function checkStringFieldsEmpty() {
        checkStringFields("", 0, 0);
    }


</script>

</body>
</html>
