
<project default="publish" basedir=".">

  <property file="build.properties"/>

  <property name="teamtools.version" value="3.7.6"/>
  <property name="teamtools.requires" value="1.10+"/>

  <property name="processdash.dir" value="../processdash"/>
  <property name="processdash.lib" value="${processdash.dir}/lib"/>
  <property name="pspdash.jar" value="${processdash.dir}/dist/pspdash.jar"/>
  <property name="xmlpull.jar" value="${processdash.lib}/kxml-2.2.1-mod.jar"/>
  <property name="jcalendar.jar" value="${processdash.lib}/jcalendar-1.3.2.jar"/>
  <property name="svg.jar" value="${processdash.lib}/svgSalamander.jar"/>
  <property name="dashlibsrc" value="${processdash.lib}/src"/>
  <property name="swingx.jar" value="lib/swingx-0.9.1.jar"/>
  <property name="swingx-src.jar" value="lib/swingx-0.9.1-src.zip"/>
  <property name="poi.jar" value="lib/poi-3.0.1-FINAL-20070705.jar"/>
  <property name="TeamProcessCGI.jar"
      value="Templates/team/lib/TeamProcessCGI.jar"/>
  <property name="server.dir" value="generateProcess"/>
  <property name="server.jar" value="generateProcess.jar"/>
  <property name="jnlp.jar" value="FrameworkEditorJNLP.jar"/>
  <property name="teamhelp" value="Templates/teamhelp"/>
  <property name="teamhelp.search" value="${teamhelp}/JavaHelpSearch"/>
  <property name="teamhelp.images" value="${teamhelp}/Images"/>
  <property name="teamhelp.imgsrc" value="${teamhelp}/Images/constr"/>


  <property environment="env"/>

  <property name="javahelp.home" value="${env.JAVAHELP_HOME}"/>


  <!-- if the "noBuild" property is set, set all other noBuild vars too -->
  <target name="-noBuild-init" if="noBuild">
    <property name="noBuild.filelist" value="true"/>
    <property name="noBuild.server" value="true"/>
    <property name="noBuild.TeamTools" value="true"/>
    <property name="noBuild.TeamProcess" value="true"/>
    <property name="noBuild.TeamProcessCGI" value="true"/>
  </target>


  <target name="-defaultValues">
    <property name="teamProcess.xml" value="PDSSD.xml"/>
    <property name="teamProcess.zip" value="PDSSD.zip"/>
  </target>

  <target name="tsp">
    <property name="teamProcess.xml" value="tsp/settings.xml"/>
    <property name="teamProcess.zip" value="TSP-v1.zip"/>
    <property name="install-flags" value="pspForEng"/>
    <property name="cd-qualifier" value="tsp"/>
  </target>

  <target name="sandia">
    <property name="teamProcess.xml" value="RUPv1.xml"/>
    <property name="teamProcess.zip" value="RUP-v1,0,0.zip"/>
    <property name="teamProcess2.zip" value="TSP-v1.zip"/>
    <property name="extraCore.xml" value="install/extraCore2.xml"/>
    <property name="install-flags" value="pspForEng"/>
    <property name="cd-qualifier" value="sandia"/>
  </target>

  <target name="davis">
    <property name="teamProcess.xml" value="DSv1.xml"/>
    <property name="teamProcess.zip" value="DS-v1.zip"/>
    <property name="install-flags" value="pspForEng"/>
    <property name="cd-qualifier" value="davis"/>
  </target>

  <target name="vvis">
    <property name="teamProcess.xml" value="vvis.xml"/>
    <property name="teamProcess.zip" value="VVGDP-v2.zip"/>
    <property name="install-flags" value="pspForEng"/>
  </target>

  <target name="vvis1">
    <property name="teamProcess.xml" value="vvis-v1.xml"/>
    <property name="teamProcess.zip" value="VVGDP-v1.zip"/>
  </target>



  <target name="filelist.txt"
          depends="-noBuild-init" unless="noBuild.filelist">
    <pathconvert property=".filelistbasedir" pathsep="," dirsep="/">
      <path id=".jhbasedir.path" path="Templates/team/setup"/>
    </pathconvert>
    <pathconvert property=".filelist" pathsep="," dirsep="/">
      <path>
        <fileset dir="Templates/team/setup" includes="*.shtm,*.link" excludes="*sizeForm*"/>
      </path>
    </pathconvert>
    <property name="filelist" value="Templates/team/setup/filelist.txt"/>
    <echo message="&lt;!--#set var='Wizard_File_List' value='LIST=,${.filelist},' --&gt;&#13;&#10;" file="${filelist}"/>
    <replace file="${filelist}" token="${.filelistbasedir}/" value=""/>
  </target>


  <target name="TeamProcessCGI"
          depends="-noBuild-init" unless="noBuild.TeamProcessCGI">
    <!-- Create a signed jarfile of cgi scripts -->  
    <jar destfile="${TeamProcessCGI.jar}" duplicate="fail">
      <fileset dir="bin">
        <include name="teamdash/templates/setup/"/>
        <include name="teamdash/FilenameMapper*"/>
      </fileset>
    </jar>
    <antcall target="signjar">
      <param name="sign.jar" value="${TeamProcessCGI.jar}"/>
      <param name="sign.alias" value="processdash-full-permissions"/>
    </antcall>
  </target>


  <target name="server" depends="-noBuild-init,TeamProcessCGI,filelist.txt"
      unless="noBuild.server"
      description="Build a JAR file to deploy to the server, where the custom process generator will run">

    <!-- compute the classes needed for the custom process servlet -->
    <classfileset id="servletClasses" dir="bin">
      <root classname="teamdash.process.CustomProcessServlet"/>
      <root classname="teamdash.process.GenerateProcess"/>
    </classfileset>

    <!-- also compute the classes needed from processdash packages -->
    <classfileset id="servletDashClasses" dir="${processdash.dir}/antbin">
      <root classname="net.sourceforge.processdash.net.http.HTMLPreprocessor"/>
      <root classname="net.sourceforge.processdash.process.PhaseUtil"/>
      <root classname="net.sourceforge.processdash.ui.lib.ProgressDialog"/>
    </classfileset>

    <jar destfile="${server.jar}" duplicate="fail">
      <!-- include the compiled files -->
      <fileset refid="servletClasses"/>
      <fileset refid="servletDashClasses"/>
      <zipfileset src="${xmlpull.jar}"/>
    </jar>

    <mkdir dir="${server.dir}"/>
    <sync todir="${server.dir}">
      <!-- include the templates -->
      <fileset dir=".">
        <include name="Templates/team/lib/" />
        <exclude name="Templates/team/lib/todo.txt" />
        <include name="Templates/team/tools/*.link" />
        <include name="Templates/team/tools/*.shtm" />
        <include name="Templates/team/setup/*.link" />
        <include name="Templates/team/setup/*.shtm" />
        <include name="Templates/team/setup/filelist.txt" />
      </fileset>
      <fileset dir="${processdash.dir}" includes="Templates/style.css"/>
    </sync>
  </target>


  <target name="jnlp-jar" 
       description="Build the JAR file for the JNLP framework editor app">
    <classfileset id="jnlpClasses" dir="bin"
      rootclass="teamdash.process.CustomProcessEditorJNLP"/>
    <jar destfile="${jnlp.jar}" duplicate="fail">
      <!-- specify the manifest file contents -->
      <manifest>
        <attribute name="Main-Class" 
              value="teamdash.process.CustomProcessEditorJNLP"/>
      </manifest>
      <fileset refid="jnlpClasses"/>
    </jar>
    <signjar jar="${jnlp.jar}" alias="tuma-solutions-2008"
	storepass="${env.TDKSPW}"/>
  </target>



  <!-- Targets to rebuild the javahelp content -->

  <target name="javahelp"
          depends="-javahelp-depend,-javahelp-index,-javahelp-images,-javahelp-book"/>

  <!-- check to see if help needs updating -->
  <target name="-javahelp-depend">
    <uptodate property="javahelp.upToDate" targetfile="${teamhelp}/book.html">
      <srcfiles dir="${teamhelp}">
        <include name="**/*.html"/>
        <include name="**/*.htm"/>
        <include name="**/*.svg"/>
        <include name="**/constr/*.png"/>
        <include name="*.xml"/>
        <include name="TeamDash.hs"/>
        <exclude name="TOC.html"/>
        <exclude name="Skeleton.html"/>
        <exclude name="book.html"/>
      </srcfiles>
    </uptodate>
    <!-- Check to see if optional packages are present -->
    <available property="javahelp.jhindexerjar"
               file ="${javahelp.home}/javahelp/bin/jhindexer.jar"
               value="${javahelp.home}/javahelp/bin/jhindexer.jar"/>
    <available property="javahelp.jhjar"
               file ="${javahelp.home}/javahelp/lib/jh.jar"
               value="${javahelp.home}/javahelp/lib/jh.jar"/>
  </target>


  <!-- invoke the jhindexer -->
  <target name="-javahelp-index" depends="-javahelp-depend"
          if="javahelp.jhindexerjar" unless="javahelp.upToDate">
    <!-- delete the previous contents of the JavaHelpSearch dir -->
    <delete dir="${teamhelp.search}" quiet="true"/>
    <mkdir dir="${teamhelp.search}"/>

    <!-- refresh the help.config file -->
    <pathconvert property=".jhbasedir" pathsep=":" dirsep="/">
      <path id=".jhbasedir.path" path="${teamhelp}"/>
    </pathconvert>
    <pathconvert property=".jhfilelist" pathsep="&#10;" dirsep="/">
      <path><fileset dir="${teamhelp}" includes="Topics/**/*.html" /></path>
    </pathconvert>
    <echo message="${.jhfilelist}" file="${teamhelp}/help.config"/>
    <replace file="${teamhelp}/help.config" token="${.jhbasedir}/"
             value="File "/>

    <!-- invoke jhindexer to rebuild the help indexes -->
    <java jar="${javahelp.jhindexerjar}" dir="${teamhelp}"
          fork="true" inputstring="">
      <arg value="-c"/>
      <arg value="help.config"/>
    </java>
  </target>

  <!-- regenerate the 'book.html' file -->
  <target name="-javahelp-book" depends="-javahelp-depend"
          unless="javahelp.upToDate">
    <xslt in="${teamhelp}/TOC.xml" out="${teamhelp}/TOC.html"
          style="${teamhelp}/makeTOC.xslt"/>
    <xslt in="${teamhelp}/TOC.xml" out="${teamhelp}/Skeleton.html"
          style="${teamhelp}/makeSkeleton.xslt"/>

    <java classpath="${processdash.dir}/lib/DocSpider.jar"
          classname="DocSpider" fork="true" dir="${teamhelp}"
	  inputstring="">
      <arg value="Skeleton.html"/>
      <arg value="book.html"/>
      <arg value="none"/>
      <arg value="-nostatus"/>
    </java>
    <delete file="${teamhelp}/Skeleton.html"/>
  </target>

  <target name="-javahelp-images" depends="-javahelp-depend"
          unless="javahelp.upToDate">
    <taskdef name="svgToImage"
             classname="net.sourceforge.processdash.SVGToImage"
	     classpath="${dashlibsrc};${svg.jar}"/>
    <svgToImage maxWidth="740" bg="#ffffff" verbose="true"
                destdir="${teamhelp.images}">
      <fileset dir="${teamhelp.imgsrc}" includes="*.svg"/>
    </svgToImage>
  </target>


  <target name="TeamTools"
          depends="-noBuild-init,javahelp" unless="noBuild.TeamTools">
    <!-- compute the classes needed for the team tools jar file -->
    <classfileset id="teamToolsClasses" dir="bin">
      <root classname="teamdash.wbs.WBSEditor"/>
      <root classname="teamdash.templates.tools.OpenWBSEditor"/>
      <root classname="teamdash.FilenameMapperExtResMgr"/>
    </classfileset>

    <!-- also compute the classes needed from processdash packages -->
    <classfileset id="dashClasses" dir="${processdash.dir}/antbin">
      <root classname="net.sourceforge.processdash.tool.bridge.client.WorkingDirectoryFactory"/>
      <root classname="net.sourceforge.processdash.tool.bridge.client.ImportDirectoryFactory"/>
      <root classname="net.sourceforge.processdash.tool.export.mgr.ExternalLocationMapper"/>
      <root classname="net.sourceforge.processdash.util.HTMLUtils"/>
      <root classname="net.sourceforge.processdash.util.PreferencesUtils"/>
      <root classname="net.sourceforge.processdash.util.RobustFileWriter"/>
      <root classname="net.sourceforge.processdash.util.RuntimeUtils"/>
      <root classname="net.sourceforge.processdash.util.StringUtils"/>
      <root classname="net.sourceforge.processdash.ui.macosx.MacGUIUtils"/>
      <root classname="net.sourceforge.processdash.ui.lib.JDateTimeChooserCellEditor"/>
    </classfileset>

    <!-- count the number of processdash classes we are using -->
    <pathconvert property="dashClassesPath" refid="dashClasses" pathsep=";">
        <regexpmapper from=".*/antbin/(.*).class" to="\1" handledirsep="true"/>
    </pathconvert>
    <script language="javascript"> <![CDATA[
        classCount = 0;
        dashClassesList = dashClassesPath.split(";").sort();
        dashClassesMsg = "";
        for (i = 0;  i < dashClassesList.length;  i++) {
            // do not count the number of inner classes
            if (dashClassesList[i].indexOf("$") == -1) {
	        classCount++;
                dashClassesMsg = dashClassesMsg + "\n    " + dashClassesList[i];
            }
        }
        if (classCount > 69) {
            project.setProperty("dashClasses.overflowCount", classCount);
            project.setProperty("dashClasses.overflowing", dashClassesMsg);
        }
    ]]> </script>

    <!-- abort if the processdash class list was larger than expected -->
    <fail if="dashClasses.overflowing">Unexpected number of
processdash classes (${dashClasses.overflowCount}) referenced by TeamTools.jar (Perhaps a runaway
class dependency has been added in a dashboard class?)
    ${dashClasses.overflowing}
    </fail>

    <!-- Determine whether to exclude libs that are not GPLv2 compatible -->
    <condition property="gpl.exclude" value="**/" else="none">
      <isset property="GPLv2"/>
    </condition>

    <!-- Now build the TeamTools.jar file -->
    <jar destfile="TeamTools.jar" duplicate="fail">
      <!-- specify the manifest file contents -->
      <manifest>
        <attribute name="Main-Class" value="teamdash.wbs.WBSEditor"/>
	<attribute name="Dash-Pkg-ID" value="teamTools"/>
	<attribute name="Dash-Pkg-Version" value="${teamtools.version}"/>
	<attribute name="Dash-Pkg-Requires-Version"
                   value="${teamtools.requires}"/>
	<attribute name="Dash-Pkg-Name" value="Advanced Team Tools"/>
	<attribute name="Dash-Pkg-URL"
	           value="http://processdash.sourceforge.net/cgi-bin/update"/>
	<attribute name="Implementation-Version" value="${teamtools.version}"/>
      </manifest>

      <!-- include the compiled files -->
      <fileset refid="teamToolsClasses"/>
      <fileset dir="bin">
        <include name="teamdash/wbs/excel/"/>
        <include name="teamdash/**/*.png"/>
        <include name="teamdash/**/*.gif"/>
        <include name="teamdash/**/default-user-settings.txt"/>
      </fileset>
      <fileset refid="dashClasses"/>

      <!-- include the wbs-editor-related templates -->
      <fileset dir=".">
        <include name="Templates/team/tools/index.shtm" />
        <include name="Templates/team/tools/OpenWBSEditor.class.link" />
        <include name="Templates/team/tools/TeamTools.jar.link" />
      </fileset>

      <!-- include the helpset for team functionality -->
      <fileset dir=".">
        <include name="Templates/TeamTools-template.xml" />
        <include name="${teamhelp}/" />
        <exclude name="${teamhelp}/help.config" />
        <exclude name="${teamhelp}/makeSkeleton.xslt" />
        <exclude name="${teamhelp.imgsrc}/" />
        <exclude name="${teamhelp.images}/Thumbs.db" />
      </fileset>

      <!-- include files from libraries we use -->
      <zipfileset src="${swingx.jar}"
          includes="org/jdesktop/swingx/autocomplete/"/>
      <zipfileset src="${swingx-src.jar}">
        <include name="swingx-src/COPYING"/>
        <include name="swingx-src/src/java/org/jdesktop/swingx/autocomplete/"/>
      </zipfileset>
      <zipfileset src="${poi.jar}" excludes="${gpl.exclude}"/>
      <zipfileset src="${xmlpull.jar}"/>
      <zipfileset src="${jcalendar.jar}"/>
    </jar>

    <antcall target="signjar">
        <param name="sign.jar" value="TeamTools.jar"/>
	<param name="sign.alias" value="tuma-solutions-2008"/>
    </antcall>
  </target>
  <target name="TeamTools.jar" depends="TeamTools"/>

  <target name="TeamProcess" depends="-defaultValues,-noBuild-init,server"
          unless="noBuild.TeamProcess">
    <java classname="teamdash.process.GenerateProcess"
          fork="true" inputstring="">
      <classpath>
        <pathelement location="${server.dir}"/>
        <pathelement location="${server.jar}"/>
      </classpath>
      <arg value="${teamProcess.xml}"/>
      <arg value="."/>
    </java>
  </target>

  <target name="-installer-props" depends="-defaultValues">
    <pathconvert property="teamdash.dir" dirSep="/">
      <path><pathelement location="."/></path>
    </pathconvert>
    <loadfile property="extraResources" srcFile="install/resources.xml">
      <filterchain><expandproperties/></filterchain>
    </loadfile>
    <loadfile property="extraPacks" srcFile="install/packs.xml">
      <filterchain><expandproperties/></filterchain>
    </loadfile>

    <property name="installerExtraIni" value=""/>
    <loadfile property="extraIni" srcFile="install/custom-install.ini">
      <filterchain><expandproperties/></filterchain>
    </loadfile>
    <property name="extraCore.xml" value="install/extraCore.xml"/>
    <loadfile property="extraCoreFiles" srcFile="${extraCore.xml}">
      <filterchain><expandproperties/></filterchain>
    </loadfile>
    <property name="install-flags" value=""/>
    <property name="cd-qualifier" value="team"/>
  </target>

  <target name="installer" depends="TeamTools,TeamProcess,-installer-props">

    <ant antfile="${processdash.dir}/installer/build.xml" inheritAll="false"
         target="web">
      <property name="alreadyRebuilt" value="true"/>
      <property name="dontCleanDist" value="true"/>
      <property name="dist" value="${teamdash.dir}"/>
      <property name="install.flags" value="${install-flags}"/>
      <property name="additional.resources" value="${extraResources}"/>
      <property name="additional.packs" value="${extraPacks}"/>
      <property name="custom-install.extra" value="${extraIni}"/>
      <property name="additional.core.files" value="${extraCoreFiles}"/>
    </ant>

    <ant antfile="${processdash.dir}/installer/build.xml" inheritAll="false"
         target="offline">
      <property name="alreadyRebuilt" value="true"/>
      <property name="dontCleanDist" value="true"/>
      <property name="dist" value="${teamdash.dir}"/>
      <property name="install.flags" value="${install-flags}"/>
      <property name="additional.resources" value="${extraResources}"/>
      <property name="additional.packs" value="${extraPacks}"/>
      <property name="custom-install.extra" value="${extraIni}"/>
      <property name="additional.core.files" value="${extraCoreFiles}"/>
    </ant>
  </target>

  <target name="installer-cd"
          depends="TeamTools,TeamProcess,installer-cd-only"/>

  <target name="installer-cd-only" depends="-installer-props">
    <ant antfile="${processdash.dir}/installer/build.xml" inheritAll="false"
         target="dist-CD">
      <property name="alreadyRebuilt" value="true"/>
      <property name="dontCleanDist" value="true"/>
      <property name="dist" value="${teamdash.dir}"/>
      <property name="install.flags" value="${install-flags}"/>
      <property name="additional.resources" value="${extraResources}"/>
      <property name="additional.packs" value="${extraPacks}"/>
      <property name="custom-install.extra" value="${extraIni}"/>
      <property name="additional.core.files" value="${extraCoreFiles}"/>
      <property name="qualifier" value="${cd-qualifier}"/>
    </ant>
  </target>

  <target name="publish" depends="TeamProcess">
    <copy todir="${processdash.dir}/dist">
      <fileset dir=".">
        <include name="${teamProcess.zip}"/>
	<include name="TeamTools.jar"/>
      </fileset>
    </copy>
  </target>

  <target name="sandia-depend" unless="noBuild.TSP">
    <antcall target="TeamProcess">
      <param name="teamProcess.xml" value="tsp/settings.xml"/>
    </antcall>
  </target>

  <target name="vvis-dist">
    <!-- build version 1 of the VVGDP -->
    <antcall target="TeamProcess">
      <param name="teamProcess.xml" value="vvis-v1.xml"/>
    </antcall>
    <!-- build version 2 of the VVGDP, and the installer -->
    <property name="teamProcess.xml" value="vvis.xml"/>
    <property name="teamProcess.zip" value="VVGDP-v2.zip"/>
    <property name="install-flags" value="pspForEng"/>
    <property name="cd-qualifier" value="vvis"/>
    <pathconvert property="teamdash.dir" dirSep="/">
      <path><pathelement location="."/></path>
    </pathconvert>
    <loadfile property="extraCoreFiles" srcFile="install/vvisCore.xml">
      <filterchain><expandproperties/></filterchain>
    </loadfile>
    <antcall target="installer-cd"/>
  </target>

  <target name="dist" depends="installer-cd"/>
  <target name="dist-all" depends="installer-cd"/>
  <target name="os-dist" depends="installer-cd"/>
  <target name="tsp-dist" depends="tsp,installer-cd"/>
  <target name="sandia-dist" depends="sandia,sandia-depend,installer-cd"/>
  <target name="davis-dist" depends="davis,installer-cd"/>

  <target name="signjar" if="env.TDKSPW">
    <exec executable="c:/java/jdk1.4.2/bin/jarsigner.exe"
          inputstring="">
        <arg value="-storepass"/>
        <arg value="${env.TDKSPW}"/>
        <arg value="${sign.jar}"/>
        <arg value="${sign.alias}"/>
    </exec>
  </target>

</project>
