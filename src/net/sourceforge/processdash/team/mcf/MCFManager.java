// Copyright (C) 2015 Tuma Solutions, LLC
// Team Functionality Add-ons for the Process Dashboard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 3
// of the License, or (at your option) any later version.
//
// Additional permissions also apply; see the README-license.txt
// file in the project root directory for more information.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, see <http://www.gnu.org/licenses/>.
//
// The author(s) may be contacted at:
//     processdash@tuma-solutions.com
//     processdash-devel@lists.sourceforge.net

package net.sourceforge.processdash.team.mcf;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.JarURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.jar.JarInputStream;

import org.w3c.dom.Document;
import org.xml.sax.SAXException;

import net.sourceforge.processdash.net.http.ContentSource;
import net.sourceforge.processdash.util.NonclosingInputStream;
import net.sourceforge.processdash.util.RuntimeUtils;
import net.sourceforge.processdash.util.XMLUtils;


public class MCFManager {

    private static final MCFManager INSTANCE = new MCFManager();

    public static final MCFManager getInstance() {
        return INSTANCE;
    }


    private Map<String, CustomProcessPublisher> mcfPublishers;

    private ContentSource contentSource;

    private Date mcfMetadataTimestamp;


    private MCFManager() {
        this.mcfPublishers = Collections.synchronizedMap(new HashMap());
        this.contentSource = createContentSource();
    }

    private ContentSource createContentSource() {
        File cp = RuntimeUtils.getClasspathFile(MCFManager.class);
        if (cp.isDirectory()) {
            // when running in development mode from unpackaged class files,
            // use today's date for MCF metadata, and load MCF source files
            // from the Templates directory within this project.
            mcfMetadataTimestamp = new Date();
            File templatesDir = new File(cp.getParentFile(), "Templates");
            return new FileContentProvider(templatesDir);

        } else {
            // when running from a prepackaged JAR file, use the timestamp of
            // an autogenerated template file as the date for MCF metadata, and
            // load MCF source files from the classpath.
            mcfMetadataTimestamp = getJarMetadataTimestamp();
            return new ClasspathContentProvider();
        }
    }

    private Date getJarMetadataTimestamp() {
        long result = 0;
        try {
            URL u = MCFManager.class.getResource(TIMESTAMP_RESOURCE);
            URLConnection conn = u.openConnection();
            if (conn instanceof JarURLConnection) {
                // if this is a JAR URL, extract the date from the JAR
                // entry for this resource.
                JarURLConnection jarConn = (JarURLConnection) conn;
                result = jarConn.getJarEntry().getTime();
            } else {
                // otherwise, ask the connection for its timestamp. This
                // may return the date of the JAR file itself.
                result = conn.getLastModified();
            }
        } catch (Exception e) {
        }
        // if the above operations failed, fallback to today's date
        return new Date(result > 0 ? result : System.currentTimeMillis());
    }


    public InputStream registerMcf(String baseURL, InputStream processXml,
            String knownVersion, boolean extFileAllowed) throws IOException {

        // parse the XML doc from the jar file input stream
        Document settings;
        try {
            NonclosingInputStream in = new NonclosingInputStream(processXml);
            settings = XMLUtils.parse(in);
        } catch (SAXException e) {
            throw new IOException("Error parsing settings.xml in " + baseURL, e);
        }

        // ensure this is the XML file for a custom process
        String rootTag = settings.getDocumentElement().getTagName();
        if (!CustomProcess.ROOT_TAG.equals(rootTag))
            return null;

        // create and initialize a publisher for this custom process
        CustomProcess process = new CustomProcess(settings);
        URL extBase = new URL(baseURL);
        CustomProcessPublisher publisher = new CustomProcessPublisher(
                contentSource, extBase);
        publisher.setHeadless(true);
        publisher.setExtFileAllowed(extFileAllowed);
        publisher.loadTimestampFromVersion(knownVersion);
        if (processXml instanceof JarInputStream)
            publisher.loadInfoFromManifest(((JarInputStream) processXml)
                    .getManifest());
        publisher.publish(process, null);

        // record the publisher in our data structures for later use
        String processID = process.getProcessID();
        mcfPublishers.put(processID, publisher);

        // return an input stream with the contents of the template.xml file
        String templateFilename = "/Templates/" + processID + "-template.xml";
        byte[] templateXmlData = publisher
                .getGeneratedFileContents(templateFilename);
        return new ByteArrayInputStream(templateXmlData);
    }

    public Date getMcfTimestamp(String mcfId) {
        CustomProcessPublisher pub = mcfPublishers.get(mcfId);
        Date mcfPublishDate = (pub == null ? null : pub.getTimestamp());
        if (mcfPublishDate != null
                && mcfPublishDate.after(mcfMetadataTimestamp))
            return mcfPublishDate;
        else
            return mcfMetadataTimestamp;
    }

    public byte[] getMcfContent(String mcfId, String path) throws IOException {
        CustomProcessPublisher pub = mcfPublishers.get(mcfId);
        return (pub == null ? null : pub.getGeneratedFileContents(path));
    }

    public URL getMcfSourceFileUrl(String mcfId, String path) {
        CustomProcessPublisher pub = mcfPublishers.get(mcfId);
        if (pub == null)
            return null;
        if (path.startsWith("/"))
            path = path.substring(1);

        try {
            URL result = new URL(pub.extBase, path);
            result.openConnection().connect();
            return result;
        } catch (IOException e) {
            return null;
        }
    }

    public Set<String> getAllMcfIDs() {
        return new HashSet<String>(mcfPublishers.keySet());
    }

    public Set<String> getAllMcfContentFilenames() {
        Set<String> result = new HashSet<String>();
        for (CustomProcessPublisher pub : mcfPublishers.values())
            result.addAll(pub.fileGenerators.keySet());
        return result;
    }

    /**
     * The name of an MCF metadata resource that is autogenerated during the
     * build process, so its modification date can indicate the effective date
     * of the MCF metadata collection as a whole.
     */
    private static final String TIMESTAMP_RESOURCE = "/Templates/team/setup/filelist.txt";

}
