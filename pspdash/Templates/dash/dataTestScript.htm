<!--
// PSP Dashboard - Data Automation Tool for PSP-like processes
// Copyright (C) 2003 Software Process Dashboard Initiative
// 
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// 
// The author(s) may be contacted at:
// OO-ALC/TISHD
// Attn: PSP Dashboard Group
// 6137 Wardleigh Road
// Hill AFB, UT 84056-5843
// 
// E-Mail POC:  processdash-devel@lists.sourceforge.net

This web page helps to test the data integration mechanism.

 Test input elements:
  - checkboxes (DATE, NORMAL)
  - text field (DATE, NUMBER, TEXT)
  - text area (TEXT)
  - select (NO VALUES, STRING VALUES, NUMERIC VALUES, set to blank)

 For each, check that it will 
  - respond to user input
  - respond to data repository
  - handle read-only state

 Check that "hidden, active" fields 
  - get updates from the repository
  - refresh the form when data changes

 Check that multiple frames AND multiple windows don't cause problems.

-->

<html>
<head>
<link rel=stylesheet type="text/css" href="/style.css">
<title>Test Data Integration</title>


</head>
<body>
<form><textarea name=script rows=4 cols=60>

    // Test the Date fields
    dataDelay = 9 * baseDelay;

    // to begin with, none of the date fields should have a value.
    checkDateFields(false);
    // check the first checkbox.
    setChecked(dateCheckUser, true);
    // now, all of the date fields should have a value.
    checkDateFields(true);
    dateValue = elements[dateTextUser].value;
    // try unchecking the third (read-only) checkbox.
    setChecked(dateCheckRO, false);
    // all of the date fields should still have a value.
    checkDateFields(true);

    // uncheck the first checkbox.
    setChecked(dateCheckUser, false);
    // now none of the date fields should have a value.
    checkDateFields(false);
    // try clicking the third (read-only) checkbox again.
    setChecked(dateCheckRO, true);
    // the date fields should still not have a value.
    checkDateFields(false);

    // manually enter a value 
    setValue(dateTextUser, dateValue);
    // now the date fields should all have values.
    checkDateFields(true);
    assert(elements[dateTextRep].value, dateValue, dateTextRep+" should have value "+dateValue);
    // try to manually blank out (read-only) field dateTextRO.
    setValue(dateTextRO, "");
    // the date fields should still all have values.
    checkDateFields(true);
    assert(elements[dateTextRep].value, dateValue, dateTextRep+" should have value "+dateValue);

    // blank out element dateTextUser.
    setValue(dateTextUser, "");
    // the date fields should no longer have values.
    checkDateFields(false);
    // try to manually enter a value in (read-only) field dateTextRO.
    setValue(dateTextRO, dateValue);
    // the date fields should still not have values.
    checkDateFields(false);


    // Test the Number fields
    dataDelay = 12 * baseDelay;

    // all the number fields should be empty to start.
    checkNumberFieldsEmpty();
    // enter 1.1 in field numUser
    setValue(numUser, "1.1");
    // check for correct values.
    checkNumberFields("1.1", "110%", 1, true);
    // enter 2.2 in field numUser
    setValue(numUser, "2.2");
    // check for correct values.
    checkNumberFields("2.2", "220%", 2, true);
    // try to enter 3.3 in numRO
    setValue(numRO, "3.3");
    // check that values haven't changed.
    checkNumberFields("2.2", "220%", 2, true);
    // try to null out numRO
    setValue(numRO, "");
    // check that values haven't changed.
    checkNumberFields("2.2", "220%", 2, true);
    // try to enter "foo" in numUser
    setValue(numUser, "foo");
    // check that values haven't changed.
    checkNumberFields("2.2", "220%", 2, true);
    // enter -0.01 in numUser
    setValue(numUser, "-0.01");
    // check for correct values.
    checkNumberFields("-0.01", "-1%", -1, true);
    // enter 0 in numUser
    setValue(numUser, "000");
    // check for correct values.
    checkNumberFields("0", "0%", -1, false);
    // null out numUser
    setValue(numUser, "");
    // check for empty values.
    checkNumberFieldsEmpty();
    // try to enter 3.3 in numRO
    setValue(numRO, "3.3");
    // check that values haven't changed.
    checkNumberFieldsEmpty();

    // enter 110% in field pctUser
    setValue(pctUser, " 110%");
    // check for correct values.
    checkNumberFields("1.1", "110%", 1, true);
    // enter 330 in field pctUser
    setValue(pctUser, "00330 ");
    // check for correct values.
    checkNumberFields("3.3", "330%", 3, true);
    // try to enter 220% in pctRO
    setValue(pctRO, "220%");
    // check that values haven't changed.
    checkNumberFields("3.3", "330%", 3, true);
    // try to null out pctRO
    setValue(pctRO, "");
    // check that values haven't changed.
    checkNumberFields("3.3", "330%", 3, true);
    // try to enter "blah" in pctUser
    setValue(pctUser, "blah");
    // check that values haven't changed.
    checkNumberFields("3.3", "330%", 3, true);
    // enter -6.2 in pctUser
    setValue(pctUser, "-6.2");
    // check for correct values.
    checkNumberFields("-0.06", "-6.2%", -1, true);
    // enter 0 in pctUser
    setValue(pctUser, "-0");
    // check for correct values.
    checkNumberFields("0", "0%", -1, false);
    // enter -921% in pctUser
    setValue(pctUser, "-921 %");
    // check for correct values.
    checkNumberFields("-9.21", "-921%", -1, true);
    // null out pctUser
    setValue(pctUser, "");
    // check for empty values.
    checkNumberFieldsEmpty();
    // try to enter 330% in pctRO
    setValue(pctRO, "330");
    // check that values haven't changed.
    checkNumberFieldsEmpty();

    // select Two from numSelUser
    setSelIndex(numSelUser, 2);
    // check for correct values.
    checkNumberFields("2.2", "220%", 2, true);
    // select Three from field numSelUser
    setSelIndex(numSelUser, 3);
    // check for correct values.
    checkNumberFields("3.3", "330%", 3, true);
    // try to enter One in numSelRO
    setSelIndex(numSelRO, 1);
    // check that values haven't changed.
    checkNumberFields("3.3", "330%", 3, true);
    // try to null out numSelRO
    setSelIndex(numSelRO, 0);
    // check that values haven't changed.
    checkNumberFields("3.3", "330%", 3, true);
    // null out numSelUser
    setSelIndex(numSelUser, 0);
    // check for empty values.
    checkNumberFieldsEmpty();
    // try to enter Two in numSelRO
    setSelIndex(numSelRO, 2);
    // check for empty values.
    checkNumberFieldsEmpty();

    // check numCheckUser
    setChecked(numCheckUser, true);
    // check for correct values.
    checkNumberFields("1", "100%", -1, true);
    // try to uncheck numCheckRO
    setChecked(numCheckRO, false);
    // check that values haven't changed.
    checkNumberFields("1", "100%", -1, true);
    // try again to uncheck numCheckRO
    setChecked(numCheckRO, false);
    // check that values haven't changed.
    checkNumberFields("1", "100%", -1, true);
    // uncheck numCheckUser
    setChecked(numCheckUser, false);
    // check for correct values.
    checkNumberFields("0", "0%", -1, false);
    // try to check numCheckRO
    setChecked(numCheckRO, true);
    // check that values haven't changed.
    checkNumberFields("0", "0%", -1, false);
    // null out numUser
    setValue(numUser, "");
    // check for empty values.
    checkNumberFieldsEmpty();


    // Test the String fields
    dataDelay = 12 * baseDelay;

    // all the string fields should be empty to start.
    checkStringFieldsEmpty();
    // set strTextUser to Foo
    setValue(strTextUser, "Foo");
    // check for correct values
    checkStringFields("Foo", 1, -1);
    // set strTextUser to -bar-
    setValue(strTextUser, "-bar-");
    // check for correct values
    checkStringFields("-bar-", -1, 2);
    // try setting strTextRO to -baz-
    setValue(strTextRO, "-baz-");
    // check that values haven't changed
    checkStringFields("-bar-", -1, 2);
    // try nulling strTextRO
    setValue(strTextRO, "");
    // check that values haven't changed
    checkStringFields("-bar-", -1, 2);
    // set strTextUser to a bizzare string
    setValue(strTextUser, weirdString);
    // check for correct values
    checkStringFields(weirdString, -1, -1);
    // null out strTextUser
    setValue(strTextUser, "");
    // check that all fields are empty
    checkStringFieldsEmpty();
    // try to set strTextRO to -bar- 
    setValue(strTextRO, "-bar-");
    // check that all fields are still empty
    checkStringFieldsEmpty();

    // set strAreaUser to Foo
    setValue(strAreaUser, "Foo");
    // check for correct values
    checkStringFields("Foo", 1, -1);
    // set strAreaUser to -bar-
    setValue(strAreaUser, "-baz-");
    // check for correct values
    checkStringFields("-baz-", -1, 3);
    // try setting strAreaRO to -bar-
    setValue(strAreaRO, "-baz-");
    // check that values haven't changed
    checkStringFields("-baz-", -1, 3);
    // try nulling strAreaRO
    setValue(strAreaRO, "");
    // check that values haven't changed
    checkStringFields("-baz-", -1, 3);
    // set strAreaUser to a bizarre string
    setValue(strAreaUser, weirdString);
    // check for correct values
    checkStringFields(weirdString, -1, -1);
    // null out strAreaUser
    setValue(strAreaUser, "");
    // check that all fields are empty
    checkStringFieldsEmpty();
    // try to set strAreaRO to -bar- 
    setValue(strAreaRO, "-bar-");
    // check that all fields are still empty
    checkStringFieldsEmpty();

    // select Foo from strSelUser
    setSelIndex(strSelUser, 1);
    // check for correct values.
    checkStringFields("Foo", 1, -1);
    // select Baz from field strSelUser
    setSelIndex(strSelUser, 3);
    // check for correct values.
    checkStringFields("Baz", 3, -1);
    // try to enter Bar in strSelRO
    setSelIndex(strSelRO, 2);
    // check that values haven't changed.
    checkStringFields("Baz", 3, -1);
    // try to null out strSelRO
    setSelIndex(strSelRO, 0);
    // check that values haven't changed.
    checkStringFields("Baz", 3, -1);
    // null out strSelUser
    setSelIndex(strSelUser, 0);
    // check for empty values.
    checkStringFieldsEmpty();
    // try to enter Baz in strSelRO
    setSelIndex(strSelRO, 3);
    // check for empty values.
    checkStringFieldsEmpty();

    // select Foo from strSelVUser
    setSelIndex(strSelVUser, 1);
    // check for correct values.
    checkStringFields("-foo-", -1, 1);
    // select Baz from field strSelVUser
    setSelIndex(strSelVUser, 3);
    // check for correct values.
    checkStringFields("-baz-", -1, 3);
    // try to enter Bar in strSelVRO
    setSelIndex(strSelVRO, 2);
    // check that values haven't changed.
    checkStringFields("-baz-", -1, 3);
    // try to null out strSelVRO
    setSelIndex(strSelVRO, 0);
    // check that values haven't changed.
    checkStringFields("-baz-", -1, 3);
    // null out strSelVUser
    setSelIndex(strSelVUser, 0);
    // check for empty values.
    checkStringFieldsEmpty();
    // try to enter Baz in strSelVRO
    setSelIndex(strSelVRO, 3);
    // check for empty values.
    checkStringFieldsEmpty();

</textarea></form>
</body></html>
