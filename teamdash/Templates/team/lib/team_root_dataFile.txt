// <!--#echo var="-*- mode:html -*-" defaultEncoding="data" -->
// Data file for a team project for <!--#echo Full_Name -->
//

#include <<!--#echo Process_ID -->/rollup_dataFile.txt> exclude (
    [Analyze Rollup Data/leaf], [Analyze Rollup Data/node]
)
#include <<!--#echo Process_ID -->/root_data.txt>
undefine([Simple Project Tag]);
[<!--#echo Process_ID -->/TeamRoot Tag] = tag;
[<!--#echo Process_ID --> Team Root Tag] = tag;
[EV Project Tag] = tag;

[EXPORT_FILE] = 
    iff([Team_Data_Directory] == "", "",
        [Team_Data_Directory] & [file_sep] & "disseminate" &
        [file_sep] & "team-data.pdash");
[EXPORT_FILE/Instructions] = 
    "file:/<!--#echo Process_ID -->/disseminationExportFilter.xml";

[Related_EV_Schedule/Team] = "MERGED:" & [Project_Schedule_Name];
[Related_EV_Schedule/Master] =
    iff(! [Master_Project_Path], "",
       "MERGED:" & indirect([Master_Project_Path] &/ "Project_Schedule_Name"));

[Individuals_Using_Stubless_Phases] = false;


/*
 * Data elements for label-based filtering
 */

[Task_Labels] = [Synchronized_Task_Labels];
[Filtered_Task_Labels] = globSearch([Label//Filter], [Task_Labels]);


/*
 * Redefine the rollup filter to include items from this project, and
 * respect the label-based filter if it is in effect.
 */
[Rollup_Filter] =
    "(!defined([{Filtered_Task_Labels}]) \
        || intersects([{Filtered_Task_Labels}], [EV_Task_IDs])) \
     && ([Project_WBS_ID] == [{Project_WBS_ID}] \
        || startsWith([{Project_WBS_ID}] & \"/\", [Project_WBS_ID]))";


/*
 * Create a list of nodes whose Project_WBS_ID matches the ID of this node.
 */
[Corresponding_Project_Nodes] =
    filter([Project_WBS_ID] == indirect([_] &/ "Project_WBS_ID"),
           setUnion([/<!--#echo Process_ID -->/Project List],
                    [/<!--#echo Process_ID -->/Indiv Root List]));

/*
 * Scan included projects to determine whether namespaced data is in use.
 */
[Rollup_Namespaced_Phase_Metrics] = 0 < count(filter(
     lookup([_] &/ "Exporting_Namespaced_Phase_Metrics"),
     [Corresponding_Project_Nodes]));


/*
 * Publish team settings data that can be exported to individuals
 */
[Team_Settings] = TAG;

[Team_Settings /Defect_Type_Standard] =
    iff([Defect Type Standard] && ([Defect Type Standard] != " "),
        [Defect Type Standard] & ", imported from team project:::" &
        indirect("/Defect Type Standard/" & [Defect Type Standard]),
        null);

[Allow_Indiv_WBS_Editing] = 2;
[Team_Settings /Allow_Indiv_WBS_Editing] = [Allow_Indiv_WBS_Editing];

[Disable_Indiv_Auto_Sync] = 0;
[Team_Settings /Disable_Indiv_Auto_Sync] = [Disable_Indiv_Auto_Sync];

[Team_Settings /Phase_Display_Filter_List] = [Phase_Display_Filter_List];

<!--#foreach name=PHASE list=Phase_List #-->
[Team_Settings /<!--#echo PHASE_Name -->/Estimated % Phase Yield] =
        [<!--#echo PHASE_Name -->/Estimated % Phase Yield];
[Team_Settings /<!--#echo PHASE_Name -->/Estimated Defects Injected per Hour] =
        [<!--#echo PHASE_Name -->/Estimated Defects Injected per Hour];
<!--#endfor-->

[Team_Settings /Target Design/Code Ratio] =
        [Target Design/Code Ratio];
[Team_Settings /Target Design Review/Design Ratio] =
        [Target Design Review/Design Ratio];
[Team_Settings /Target Code Review/Code Ratio] =
        [Target Code Review/Code Ratio];
[Team_Settings /Target Test Defect Density] =
        [Target Test Defect Density];
[Team_Settings /Target Compile Defect Density] =
        [Target Compile Defect Density];
